package me.paul.hw3.simulation.grid;

import java.awt.BorderLayout;
import java.awt.Color;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JLabel;

import lombok.Getter;
import me.paul.hw3.simulation.Agent;
import me.paul.hw3.simulation.Coyote;
import me.paul.hw3.simulation.grid.Board.Direction;

/**
 * A Cell that represents each individual spot on our {@link Board}
 * 
 * @author Paul Guarnieri
 *
 */
@Getter
public class Cell extends JComponent {

	/**
	 * The width of each cell that will be drawn on the screen. Will also be used
	 * for height since they are equal in a Square
	 */
	public static final int SQUARE_WIDTH = 50;

	/**
	 * Generated by {@link JComponent}
	 */
	private static final long serialVersionUID = 3962034456495915406L;

	/**
	 * The {@link Board} that this {@link Cell} belongs to
	 */
	private final Board board;
	/**
	 * Row this {@link Cell} is on
	 */
	private final int row;
	/**
	 * Column this {@link Cell} is on
	 */
	private final int column;

	/**
	 * The {@link Agent} that is occupying this {@link Cell} at this time. Will be
	 * null if there is currently no {@link Agent} on this {@link Cell}
	 **/
	private Agent<? extends Agent<?>> occupying;

	/**
	 * Label for displaying the occupying {@link Agent} on this {@link Cell} on the
	 * screen
	 */
	private final JLabel label;

	/**
	 * Construct a new {@link Cell} for a given {@link Board}
	 * @param board {@link Board} that this {@link Cell} will belong to
	 * @param row Row that this {@link Cell} exists on
	 * @param column Column that this {@link Cell} exists on
	 */
	public Cell(Board board, int row, int column) {
		this.board = board;
		this.row = row;
		this.column = column;

		setLayout(new BorderLayout());
		setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
		setVisible(true);
		setOpaque(false);

		this.label = new JLabel();
		label.setHorizontalAlignment(JLabel.CENTER);
		label.setVisible(true);
		label.setText("");

		add(label);
	}

	/**
	 * Set which {@link Agent} is currently occupying this Cell
	 * 
	 * @param agent Agent to set this Cell to, can be null
	 */
	public void setOccupying(Agent<? extends Agent<?>> agent) {
		this.occupying = agent;
		updateLabel();
	}

	/**
	 * Update the instance of the {@link JLabel} to allow the user to see if there
	 * is an {@link Agent} on this {@link Cell}
	 */
	public void updateLabel() {
		if (isOccupied()) {
			String type = occupying instanceof Coyote ? "C" : "R";
			label.setText(type + " (Age: " + occupying.getAge() + ")");
		} else {
			label.setText("");
		}
	}

	/**
	 * Check if this {@link Cell} is currently being occupied
	 * @return True if this {@link Cell} is currently being occupied
	 */
	public boolean isOccupied() {
		return occupying != null;
	}

	/**
	 * Use Pythagorean Theorem to calculate the distance between 2 cells
	 * 
	 * @param other Other cell to calcluate distance from
	 * @return The distance between this Cell and the other cell
	 */
	public double distance(Cell other) {
		return Math.sqrt(Math.pow(row - other.row, 2) + Math.pow(column - other.column, 2));
	}

	/**
	 * Get the {@link Cell} relative to this one given a {@link Direction}
	 * 
	 * @param dir Direction to look from
	 * @return The {@link Cell}, relative to this one, if it exists
	 */
	public Cell getRelative(Direction dir) {
		int x = getRow();
		int y = getColumn();

		int offX = dir.getRowOffset();
		int offY = dir.getColumnOffset();

		return board.findCell(x + offX, y + offY);
	}

}
